---
layout: post
title: "notes of Prataical Object Oriented Design --Object-Oriented Desgin"
date: 2014-08-17 22:13
comments: true
categories: ruby
---
对于程序员来说，面向对象设计是一个非常熟悉的名词。从大一开始就接触所谓的面向对象，可是一直到今天，对于面向对象设计还是处于懵懵懂懂的状态。有幸现在公司的老大在
面试的时候给我介绍了一本书[面向对象设计实践指南：Ruby语言描述](http://book.douban.com/subject/25795276/),去年年底看了一下当时当时确实有了一些体会，
不过当你积累的知识长时间没有被实践的时候，那么只会产生一种后果，那就是遗忘。好在上周被批评了一下，重新认识到了自己的问题，工作了半年其实还是有点停滞不前，
看的书确实过少。上周花了一天时间又把这本书看完了，确实又有了更进一步的体会。接下来会花一些实践把这些总结成自己的博客。今天这篇先介绍第一张本书对Object-Oriented
 Design的看法。  
##设计礼赞  
无论是一个小的游戏还是一个完整的应用程序，都是看最终的完成结果，一个设计不好的应用会让程序员越陷越深，处于无尽的问题之中。而最终带给程序员福音的还是面向对象设计，
面向对象设计能够给程序员解决道德和编程技术难题，能够很好解决效率问题。这就是为什么需要进行设计的最主要原因。  
###设计解决的问题  
1. 需求变化带来对于整个项目的影响，设计能够拥抱变化，低耦合的设计能够很好处理需求变化的问题。  
2. 面向对象设计能够很好地管理一个对象的各个部件之间的依赖，能够使得各个部件之间的变化对比彼此产生很小的影响。  
3. 面向对象设计本质上是对代码的组织管理，好的设计最终的目的为能够轻松应对将来的变化。  
###设计工具   
####设计原则  
1.  SOLID(Single Responsibility、Open-Closed、 Liskov Substitution、Interface Segregation、Dependency Inversion.)
2.  Design Patterns(Gof)  
####设计行动
1.  设计失败取决于具体的经验，经验不足以及语言的特性可能会导致糟糕的设计。
2.  敏捷开发不会做Big Up Front Design (BUFD)，敏捷开发需要根据需求一步步迭代，软件的最终完成时间是不可预期的。

原理很重要，但是接下来几篇博客会在具体的行动中来一步步实现好的设计。

