<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | coding on the way]]></title>
  <link href="http://ailenswpu.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://ailenswpu.github.io/"/>
  <updated>2015-08-02T20:48:14+08:00</updated>
  <id>http://ailenswpu.github.io/</id>
  <author>
    <name><![CDATA[ailen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goagent上twitter的错误]]></title>
    <link href="http://ailenswpu.github.io/blog/2013/03/26/goagentshang-twitterde-cuo-wu/"/>
    <updated>2013-03-26T22:11:00+08:00</updated>
    <id>http://ailenswpu.github.io/blog/2013/03/26/goagentshang-twitterde-cuo-wu</id>
    <content type="html"><![CDATA[<p>今天学习了一下linux下面使用goagent来进行翻墙浏览twitter、facebook等。具体参照<a href="https://code.google.com/p/goagent/wiki/InstallGuide">IntallGuide</a>。不过出现了打开twitter等网站证书的问题，参照了<a href="http://ruby-china.org/topics/3114">ruby-china</a>，这个导入了证书还是没用。
汗颜，搞了好久，最后终于在<a href="https://code.google.com/p/goagent/issues/detail?id=775">googlecode</a>知道到了如下方法:
     使用中发现很多https网站弹出证书警示，需要将local/ca.crt证书导入，下面简单介绍ubuntu下chrome证书的导入方法。
     安装libnss3-tools:sudo apt-get install libnss3-tools
     然后导入证书(这里假定证书ca.crt位于&#8221;/goagent/local/ca.crt&#8221;):certutil -d sql:$HOME/.pki/nssdb -A -t &ldquo;C,,&rdquo; -n GoAgent -i &lsquo;/goagent/local/ca.crt&rsquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员如何保持优秀(转载)]]></title>
    <link href="http://ailenswpu.github.io/blog/2012/10/29/cheng-xu-yuan-ru-he-bao-chi-you-xiu-zhuan-zai/"/>
    <updated>2012-10-29T14:34:00+08:00</updated>
    <id>http://ailenswpu.github.io/blog/2012/10/29/cheng-xu-yuan-ru-he-bao-chi-you-xiu-zhuan-zai</id>
    <content type="html"><![CDATA[<ol>
<li><p>小范围的选择一些有用技术，透彻的学习它们，拥抱它们。然后不断的扩展这个范围。</p></li>
<li><p>理解各种数据结构的优点和缺点，包括它们在内存中和在硬盘上的各自表现。</p></li>
<li><p>理解各种算法的优点和缺点。</p></li>
<li><p>了解你的工作领域。关上电脑，去做你的用户们在做的事。</p></li>
<li><p>有准备，有愿望，有能力在任何时候投入到多种技术层面中。你必须知道表象下的技术原理。在“各个技术层面的掌握程度”和“编程能力”上有着密切的联系。</p></li>
<li><p>发挥你的想象力。永远都要问，“有更好的方法吗？”跳出常规思维约束。最好的解决方案也许还没有被发现。</p></li>
<li><p>优秀程序员：我优化代码。更优秀程序员：我设计数据。最优秀程序员：他们的不同之处是什么？</p></li>
<li><p>正确的构造你的数据。任何的缺陷都将造成你的代码里无尽的技术债务。</p></li>
<li><p>正确的命名事物。使用“动词-形容词-名词”格式来命名程序和函数。变量名要足够长，尽量短，有意义。如果其他程序员不能够理解你的代码，说明你写的不够清楚。在大多数情况下，针对下一个程序员而编码要比针对环境而编码重要的多。</p></li>
<li><p>把分析和编程分离开做。它们不是同类的事物，需要不同类型的劳力资源，需要在完全不同的时间和地点分开做。如果同时做它们，你一样都做不好。(我喜欢在一天的末尾做不涉及技术的分析，而在第二天早上进行编程。)</p></li>
<li><p>永远不要图省事走近道。永远不要把相同的代码部署两次。永远不要把一个变量命名成另一个变量名的一部分。也许你不明白这些规则，也许你要辩解。但如果你是遵守着这样做的，这些规则就会约束你正确的构造你的程序。图省事的做法是让那些低等级的程序员永远停留在低等级的原因。</p></li>
<li><p>学习如何测评程序性能。你会惊奇的发现从中能学到很多之外的知识。</p></li>
<li><p>学会区别对待问题细节和问题后果。问题细节不会导致太大的差别，而问题后果能导致世界灭亡。只关注后果。</p></li>
<li><p>密切关注你的用户/客户/管理人员。帮助他们认清楚他们的“what”，这比帮助他们明白他们的“how”要重要的多。</p></li>
<li><p>写一个框架，不论你是否打算用它。你将从中学到从其它途径中学不到的东西。</p></li>
<li><p>把你知道的东西教给他人——通过口口交流或通过写作。最终这将成为教育自己的机会。</p></li>
<li><p>永远要对你的客户/用户说“Yes”，即使在你不确定的情况下。90%的情况下，你会最终找到方法实现它。10%的机会，你将会去向他们道歉。这是重要的个人成长中付出的一点小代价。</p></li>
<li><p>寻找别人的做出神奇的事情但却一滩糊涂的代码。重构它。然后丢掉它，并发誓自己永远不要犯他们犯下的相同错误。(这样的程序你会发现很多。)</p></li>
<li><p>数据永远 > 理论或观点。通过开发东西来学习数据。</p></li>
<li><p>有可能的话，开创自己的业务(服务或产品)。你将从中学到很多你做雇员永远学不到的关于编程的知识。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
